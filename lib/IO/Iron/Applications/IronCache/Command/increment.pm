package IO::Iron::Applications::IronCache::Command::increment;

use 5.010_000;
use strict;
use warnings FATAL => 'all';

# Global creator
BEGIN {
    # Inheritance
    use parent qw( IO::Iron::Applications::Command::CommandBase );
}

# Global destructor
END {
}

# ABSTRACT: Increment an item/items in cache/caches.

# VERSION: generated by DZP::OurPkgVersion

=head1 SYNOPSIS

This package is for internal use of IO::Iron::Applications.

=cut

use IO::Iron::Applications::IronCache -command;

sub description {
	return "Increment an item/items in cache/caches.";
}

sub usage_desc {
	my ($self, $opt, $args) = @_;
	return $opt->arg0() . " %o increment item <item_key>[,<item_key>] --value <increment_value> --cache <cache_name>[,<cache_name>]";
}

sub opt_spec {
    # Note, dashes '-' become underscores '_' during opt_spec conversion!
	return (
        IO::Iron::Applications::Command::CommandBase::opt_spec_base(),
		[ 'cache=s',	"cache name or names (separated with \',\')", ],
        [ 'value=i', 'increment value, integer', ],
        [ 'create-cache', 'If cache does not exist, create it', { 'default' => 0, }, ],
	);
}

sub validate_args {
	my ($self, $opt, $args) = @_;
    $self->validate_args_base($opt, $args);
	$self->usage_error("wrong number of arguments") unless scalar @{$args} == 2;
	$self->usage_error("invalid arguments") unless ($args->[0] eq 'item');
    $self->usage_error("missing cache name") unless (defined $opt->{'cache'});
    $self->usage_error("missing value") unless (defined $opt->{'value'});
}

sub execute {
    my ($self, $opts, $args) = @_;

    $self->raise_logging_levels_from_options($opts);
    if($self->check_for_iron_io_config($opts)) {
        return 1;
    }
    my %parameters;
    $parameters{'config'} = $opts->{'config'} if defined $opts->{'config'};
    $parameters{'policies'} = $opts->{'policies'} if defined $opts->{'policies'};
    $parameters{'no-policy'} = $opts->{'no-policy'};
    $parameters{'item_key'} = [ split q{,}, $args->[1] ]; # expects array
    $parameters{'item_increment'} = $opts->{'value'};
    $parameters{'cache_name'} = [ split q{,}, $opts->{'cache'} ]; # expects array
    $parameters{'create_cache'} = $opts->{'create_cache'};
    my %output;
    %output = IO::Iron::Applications::IronCache::Functionality::increment_item(%parameters);

    print $self->combine_template("increment_item", \%output);
    return 0;
}

1;
