package IO::Iron::Applications::IronCache::Command::list;

## no critic (Documentation::RequirePodAtEnd)
## no critic (Documentation::RequirePodSections)
## no critic (RegularExpressions::RequireExtendedFormatting)
## no critic (RegularExpressions::RequireLineBoundaryMatching)
## no critic (RegularExpressions::ProhibitEscapedMetacharacters)

use 5.010_000;
use strict;
use warnings FATAL => 'all';

# Global creator
BEGIN {
    use parent qw( IO::Iron::Applications::Command::CommandBase ); # Inheritance
}

# Global destructor
END {
}

# ABSTRACT: List caches or items in a cache.

# VERSION: generated by DZP::OurPkgVersion

=head1 SYNOPSIS

This package is for internal use of IO::Iron packages.

=cut

use Data::Dumper;

use IO::Iron::Applications::IronCache -command;

use Log::Any  qw{$log};
use Carp::Assert;
use Carp::Assert::More;
use Carp;
use English '-no_match_vars';
use Try::Tiny;
use Scalar::Util qw{blessed looks_like_number};
use Exception::Class (
      'IronHTTPCallException' => {
        fields => ['status_code', 'response_message'],
      }
  );

require IO::Iron::Applications::IronCache::Functionality;
require IO::Iron::Applications::IronCache::Templates;

sub description {
	return "Show an IronCache";
}

sub usage_desc { 
	my ($self, $opt, $args) = @_;
	#print Dumper(@_);
	#print "This function (usage_desc) is accessed?";
	return $opt->arg0() . " %o show cache [cache name]" ;
}

sub usage { 
    my ($self, $opt, $args) = @_;
    #print Dumper(@_);
    #print "This function (usage) is accessed?";
    #return "Command name list and some more.";
    return $opt->arg0() . " %o show cache [cache name]" ;
}

sub opt_spec {
    # Note, dashes '-' become underscores '_' during opt_spec conversion!
    return (
        IO::Iron::Applications::Command::CommandBase::opt_spec_base(),
        [ 'cache=s',    "cache name or names (separated with \',\')", ],
    );
}

sub validate_args {
	my ($self, $opt, $args) = @_;
    #$self->usage_error("too few arguments") unless @$args >= 1;
    $self->usage_error("wrong arguments") unless ($args->[0] eq 'caches' || $args->[0] eq 'items');
    $self->usage_error("missing cache name (must have)") if ($args->[0] eq 'items' && !defined $opt->{'cache'});
    $self->usage_error("missing item name (must have)") if ($args->[0] eq 'items' && !defined $args->[1]);
    $self->usage_error("Wrong number of arguments") if ($args->[0] eq 'caches' && @$args > 1);
}

sub execute {
	my ($self, $opts, $args) = @_;

    $self->raise_logging_levels_from_options($opts);
    if($self->check_for_iron_io_config($opts)) {
        return 1;
    }
    my %parameters;
    $parameters{'config'} = $opts->{'config'} if defined $opts->{'config'};
    $parameters{'policies'} = $opts->{'policies'} if defined $opts->{'policies'};
    $parameters{'no-policy'} = $opts->{'no-policy'};
    my %output;
    if($args->[0] eq 'caches') {
        #$parameters{'cache_name'} = $args->[1] if ($args->[0] eq 'caches' && @$args > 1);
        %output = IO::Iron::Applications::IronCache::Functionality::list_caches(%parameters);
        print $self->combine_template("list_caches", \%output);
    }
    elsif($args->[0] eq 'items') {
        $parameters{'item_key'} = [ split q{,}, $args->[1] ] if (@$args > 1); # expects array
        $parameters{'cache_name'} = [ split q{,}, $opts->{'cache'} ]; # expects array;
        %output = IO::Iron::Applications::IronCache::Functionality::list_items(%parameters);
        print $self->combine_template("list_items", \%output);
    }
    return 0;
}

1;
